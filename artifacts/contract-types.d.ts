/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface CountResponse {
  count: number;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HandleMsg =
  | {
      increment: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      reset: {
        count: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface InitMsg {
  count: number;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryMsg = {
  get_count: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
};
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;

export interface State {
  count: number;
  owner: Binary;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HumanAddr = string;
export type Uint128 = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
/**
 * This is used for uploading logo data, or setting it in InstantiateData
 */
export type Logo =
  | {
      url: string;
      [k: string]: unknown;
    }
  | {
      embedded: EmbeddedLogo;
      [k: string]: unknown;
    };
/**
 * This is used to store the logo on the blockchain in an accepted format. Enforce maximum size of 5KB on all variants.
 */
export type EmbeddedLogo =
  | {
      svg: Binary;
      [k: string]: unknown;
    }
  | {
      png: Binary;
      [k: string]: unknown;
    };

export interface ExtendedInitMsg {
  base_init_msg: InitMsg;
  marketing?: InstantiateMarketingInfo | null;
  [k: string]: unknown;
}
export interface InitMsg {
  admin?: HumanAddr | null;
  config?: InitConfig | null;
  decimals: number;
  initial_balances?: InitialBalance[] | null;
  name: string;
  prng_seed: Binary;
  symbol: string;
  [k: string]: unknown;
}
/**
 * This type represents optional configuration values which can be overridden. All values are optional and have defaults which are more private by default, but can be overridden if necessary
 */
export interface InitConfig {
  /**
   * Indicates whether burn functionality should be enabled default: False
   */
  enable_burn?: boolean | null;
  /**
   * Indicates whether deposit functionality should be enabled default: False
   */
  enable_deposit?: boolean | null;
  /**
   * Indicates whether mint functionality should be enabled default: False
   */
  enable_mint?: boolean | null;
  /**
   * Indicates whether redeem functionality should be enabled default: False
   */
  enable_redeem?: boolean | null;
  /**
   * Indicates whether the total supply is public or should be kept secret. default: False
   */
  public_total_supply?: boolean | null;
  [k: string]: unknown;
}
export interface InitialBalance {
  address: HumanAddr;
  amount: Uint128;
  [k: string]: unknown;
}
export interface InstantiateMarketingInfo {
  description?: string | null;
  logo?: Logo | null;
  marketing?: string | null;
  project?: string | null;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HandleAnswer =
  | {
      deposit: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      redeem: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_transfer: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_send: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      register_receive: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      create_viewing_key: {
        key: ViewingKey;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_viewing_key: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      increase_allowance: {
        allowance: Uint128;
        owner: HumanAddr;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      decrease_allowance: {
        allowance: Uint128;
        owner: HumanAddr;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_transfer_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_send_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_burn_from: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      mint: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_mint: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      add_minters: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      remove_minters: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_minters: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      change_admin: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_contract_status: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      revoke_permit: {
        status: ResponseStatus;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type ResponseStatus = "success" | "failure";
export type ViewingKey = string;
export type Uint128 = string;
export type HumanAddr = string;
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type HandleMsg =
  | {
      redeem: {
        amount: Uint128;
        denom?: string | null;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      deposit: {
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer: {
        amount: Uint128;
        memo?: string | null;
        padding?: string | null;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send: {
        amount: Uint128;
        memo?: string | null;
        msg?: Binary | null;
        padding?: string | null;
        recipient: HumanAddr;
        recipient_code_hash?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_transfer: {
        actions: TransferAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_send: {
        actions: SendAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn: {
        amount: Uint128;
        memo?: string | null;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      register_receive: {
        code_hash: string;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      create_viewing_key: {
        entropy: string;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_viewing_key: {
        key: string;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      increase_allowance: {
        amount: Uint128;
        expiration?: number | null;
        padding?: string | null;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      decrease_allowance: {
        amount: Uint128;
        expiration?: number | null;
        padding?: string | null;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_from: {
        amount: Uint128;
        memo?: string | null;
        owner: HumanAddr;
        padding?: string | null;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      send_from: {
        amount: Uint128;
        memo?: string | null;
        msg?: Binary | null;
        owner: HumanAddr;
        padding?: string | null;
        recipient: HumanAddr;
        recipient_code_hash?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_transfer_from: {
        actions: TransferFromAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_send_from: {
        actions: SendFromAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn_from: {
        amount: Uint128;
        memo?: string | null;
        owner: HumanAddr;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_burn_from: {
        actions: BurnFromAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      mint: {
        amount: Uint128;
        memo?: string | null;
        padding?: string | null;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      batch_mint: {
        actions: MintAction[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      add_minters: {
        minters: HumanAddr[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      remove_minters: {
        minters: HumanAddr[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_minters: {
        minters: HumanAddr[];
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      change_admin: {
        address: HumanAddr;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      set_contract_status: {
        level: ContractStatusLevel;
        padding?: string | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      revoke_permit: {
        padding?: string | null;
        permit_name: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type Uint128 = string;
export type HumanAddr = string;
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
export type ContractStatusLevel = "normal_run" | "stop_all_but_redeems" | "stop_all";

export interface TransferAction {
  amount: Uint128;
  memo?: string | null;
  recipient: HumanAddr;
  [k: string]: unknown;
}
export interface SendAction {
  amount: Uint128;
  memo?: string | null;
  msg?: Binary | null;
  recipient: HumanAddr;
  recipient_code_hash?: string | null;
  [k: string]: unknown;
}
export interface TransferFromAction {
  amount: Uint128;
  memo?: string | null;
  owner: HumanAddr;
  recipient: HumanAddr;
  [k: string]: unknown;
}
export interface SendFromAction {
  amount: Uint128;
  memo?: string | null;
  msg?: Binary | null;
  owner: HumanAddr;
  recipient: HumanAddr;
  recipient_code_hash?: string | null;
  [k: string]: unknown;
}
export interface BurnFromAction {
  amount: Uint128;
  memo?: string | null;
  owner: HumanAddr;
  [k: string]: unknown;
}
export interface MintAction {
  amount: Uint128;
  memo?: string | null;
  recipient: HumanAddr;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryAnswer =
  | {
      token_info: {
        decimals: number;
        name: string;
        symbol: string;
        total_supply?: Uint128 | null;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      token_config: {
        burn_enabled: boolean;
        deposit_enabled: boolean;
        mint_enabled: boolean;
        public_total_supply: boolean;
        redeem_enabled: boolean;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      contract_status: {
        status: ContractStatusLevel;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      exchange_rate: {
        denom: string;
        rate: Uint128;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      allowance: {
        allowance: Uint128;
        expiration?: number | null;
        owner: HumanAddr;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      balance: {
        amount: Uint128;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_history: {
        total?: number | null;
        txs: Tx[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transaction_history: {
        total?: number | null;
        txs: RichTx[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      viewing_key_error: {
        msg: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      minters: {
        minters: HumanAddr[];
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type Uint128 = string;
export type ContractStatusLevel = "normal_run" | "stop_all_but_redeems" | "stop_all";
export type HumanAddr = string;
export type TxAction =
  | {
      transfer: {
        from: HumanAddr;
        recipient: HumanAddr;
        sender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      mint: {
        minter: HumanAddr;
        recipient: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      burn: {
        burner: HumanAddr;
        owner: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      deposit: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      redeem: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface Tx {
  block_height?: number | null;
  block_time?: number | null;
  coins: Coin;
  from: HumanAddr;
  id: number;
  memo?: string | null;
  receiver: HumanAddr;
  sender: HumanAddr;
  [k: string]: unknown;
}
export interface Coin {
  amount: Uint128;
  denom: string;
  [k: string]: unknown;
}
export interface RichTx {
  action: TxAction;
  block_height: number;
  block_time: number;
  coins: Coin;
  id: number;
  memo?: string | null;
  [k: string]: unknown;
}
/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type QueryMsg =
  | {
      token_info: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      token_config: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      contract_status: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      exchange_rate: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      allowance: {
        key: string;
        owner: HumanAddr;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      balance: {
        address: HumanAddr;
        key: string;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_history: {
        address: HumanAddr;
        key: string;
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transaction_history: {
        address: HumanAddr;
        key: string;
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      minters: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      with_permit: {
        permit: PermitFor_TokenPermissions;
        query: QueryWithPermit;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };
export type HumanAddr = string;
export type TokenPermissions = "allowance" | "balance" | "history" | "owner";
/**
 * Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.
 *
 * This is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>
 */
export type Binary = string;
export type QueryWithPermit =
  | {
      allowance: {
        owner: HumanAddr;
        spender: HumanAddr;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      balance: {
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transfer_history: {
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    }
  | {
      transaction_history: {
        page?: number | null;
        page_size: number;
        [k: string]: unknown;
      };
      [k: string]: unknown;
    };

export interface PermitFor_TokenPermissions {
  params: PermitParamsFor_TokenPermissions;
  signature: PermitSignature;
  [k: string]: unknown;
}
export interface PermitParamsFor_TokenPermissions {
  allowed_tokens: HumanAddr[];
  chain_id: string;
  permissions: TokenPermissions[];
  permit_name: string;
  [k: string]: unknown;
}
export interface PermitSignature {
  pub_key: PubKey;
  signature: Binary;
  [k: string]: unknown;
}
export interface PubKey {
  /**
   * ignored, but must be "tendermint/PubKeySecp256k1" otherwise the verification will fail
   */
  type: string;
  /**
   * Secp256k1 PubKey
   */
  value: Binary;
  [k: string]: unknown;
}
